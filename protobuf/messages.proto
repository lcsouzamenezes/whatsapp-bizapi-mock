syntax = "proto3";
package whatsapp;

import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";
import "meta.proto";
import "general.proto";

option go_package = "/model";

message Context {
    string from = 1;
    string id = 2;
    repeated string mentions = 3;
    bool forwarded = 4;
    bool frequently_forwarded = 5;
}


message Provider {
    string name = 1;
}

message TextMessage {
    string body = 1 [(validate.rules).string.min_len = 1];
}

message ImageMessage {
    string file = 1;
    string id = 2 [(validate.rules).string.min_len = 10];
    string link = 3;
    string mime_type = 4;
    string sha256 = 5;
    string caption = 6;
    Provider provider = 8;
}

message AudioMessage {
    string file = 1;
    string id = 2 [(validate.rules).string.min_len = 10];
    string link = 3;
    string mime_type = 4;
    string sha256 = 5;
    Provider provider = 6;
}

message VideoMessage {
    string file = 1;
    string id = 2 [(validate.rules).string.min_len = 10];
    string link = 3;
    string mime_type = 4;
    string sha256 = 5;
    string caption = 6;
    Provider provider = 7;
}

message VoiceMessage {
    string file = 1;
    string id = 2 [(validate.rules).string.min_len = 10];
    string link = 3;
    string mime_type = 4;
    string sha256 = 5;
}

message DocumentMessage {
    string file = 1;
    string id = 2 [(validate.rules).string.min_len = 10];
    string link = 3;
    string mime_type = 4;
    string sha256 = 5;
    string caption = 6;
    string filename = 7;
    Provider provider = 8;
}

message MediaParameter {
    string id = 1 [(validate.rules).string.min_len = 10];
    string filename = 2;
    string caption = 3;
}

message TemplateMessage {
    message Language {
        enum Policy {
            deterministic = 0;
        }
        enum Code {
            en = 0;
            de = 1;
        }
        Policy policy = 1 [(validate.rules).enum.defined_only = true];
        Code code = 2 [(validate.rules).enum.defined_only = true];
    }
    message Component {
        message Parameter {
            message CurrencyParameter {
                string fallback_value = 1;
                string code = 2;
                uint32 amount_1000 = 3;
            }
            enum Calendar {
                GREGORIAN = 0;
                SOLAR_HIJRI = 1;
            }
            message DateTimeParameter {
                string fallback_value = 1;
                uint32 day_of_week = 2;
                uint32 day_of_month = 3;
                uint32 year = 4;
                uint32 month = 5;
                uint32 hour = 6;
                uint32 minute = 7;
                uint64 timestamp = 8;
                Calendar calendar = 9;
            }

            string type = 1 [(validate.rules).string = {
                in: ["text", "image", "document", "video", "currency", "date_time"],
            }];

            oneof spec {
                string text = 2;
                CurrencyParameter currency = 3;
                DateTimeParameter date_time = 4;
                MediaParameter image = 5;
                MediaParameter document = 6;
                MediaParameter video = 7;
                string payload = 8;
            }
        }

        string type = 1 [(validate.rules).string = {in: ["header", "body", "footer", "button"]}];
        string sub_type = 2 [(validate.rules).string = {
            ignore_empty: true,
            in: ["quick_reply", "url"]
        }];
        string index = 3;
        repeated Parameter parameters = 4;
    }

    string namespace = 1;
    string name = 2;
    Language language = 3;
    repeated Component components = 4;
}

message InteractiveMessage {
    message HeaderParameter {
        string type = 1 [(validate.rules).string = {in: ["text", "video", "image", "document"]}];
        string text = 2;
        MediaParameter image = 3;
        MediaParameter document = 4;
        MediaParameter video = 5;
    }
    message TextParameter {
        string text = 1;
    }
    message Section {
        message SectionRow {
            string id = 1;
            string title = 2;
            string description = 3;
        }

        string title = 1;
        repeated SectionRow rows = 2;
    }
    message ButtonsAction {
        message ButtonsActionReply {
            string id = 1 [(validate.rules).string = {
                min_len: 1,
                max_len: 256,
            }];
            string title = 2 [(validate.rules).string = {
                pattern:   "^[^\\x{1F600}-\\x{1F6FF}|[\\x{2600}-\\x{26FF}]*$", // do not allow emojis (does not check all emojis)
                min_len: 1,
                max_len: 20,
             }];
        }

        string type = 1 [(validate.rules).string.const = "reply"]; // only supported type is reply
        ButtonsActionReply reply = 2;
    }

    message ActionWrapper {
        string button = 1; // only for list interactive message
        repeated ButtonsAction buttons = 2; // only for button interactive message
        repeated Section sections = 3; // only for list interactive message
    }

    string type = 1 [(validate.rules).string = {in: ["list", "button"]}];
    HeaderParameter header = 2;
    TextParameter body = 3;
    TextParameter footer = 4;
    ActionWrapper action = 5;

}

message LocationMessage {
    string address = 1;
    int64 latitude = 2;
    int64 longitude = 3;
    string name = 4;
}

message SystemMessage {
    string body = 1;
}

message StickerMessage {
    string id = 1;
    string link = 3;
    Provider provider = 8;
}

message MessageWrapper {
    repeated Message messages = 1;
}

message Messagemeta {
    string to = 1;
    meta.MessageType type = 2;
}

message Message {
    string id = 1;
    string from = 2;
    string to = 3 [(validate.rules).string = {
        pattern: "^\\+?(?:[0-9]){6,14}[0-9]$" // This is not correct for 100% of cases
    }];
    Context context = 4;
    meta.MessageType type = 5;
    int64 timestamp = 6;
    repeated whatsapp.Error errors = 7;

    TextMessage text = 8;
    ImageMessage image = 9;
    AudioMessage audio = 10;
    VideoMessage video = 11;
    VoiceMessage voice = 12;
    DocumentMessage document = 13;
    LocationMessage location = 14;
    SystemMessage system = 15;
    StickerMessage sticker = 16;
    TemplateMessage template = 17;
    InteractiveMessage interactive = 18;

    enum RecipientType {
        unknown = 0;
        individual = 1;
        group = 2;
    }

    RecipientType recipient_type = 19;
    bool preview_url = 20;
}
