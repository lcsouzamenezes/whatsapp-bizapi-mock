// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: whatsapp.proto

package model

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Contact with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Contact) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WaId

	if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContactValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for Input

	return nil
}

// ContactValidationError is the validation error returned by Contact.Validate
// if the designated constraints aren't met.
type ContactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactValidationError) ErrorName() string { return "ContactValidationError" }

// Error satisfies the builtin error interface
func (e ContactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactValidationError{}

// Validate checks the field values on Meta with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Meta) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Version

	// no validation rules for ApiStatus

	return nil
}

// MetaValidationError is the validation error returned by Meta.Validate if the
// designated constraints aren't met.
type MetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetaValidationError) ErrorName() string { return "MetaValidationError" }

// Error satisfies the builtin error interface
func (e MetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetaValidationError{}

// Validate checks the field values on Id with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Id) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// IdValidationError is the validation error returned by Id.Validate if the
// designated constraints aren't met.
type IdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdValidationError) ErrorName() string { return "IdValidationError" }

// Error satisfies the builtin error interface
func (e IdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdValidationError{}

// Validate checks the field values on TokenResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TokenResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	// no validation rules for ExpiresAfter

	return nil
}

// TokenResponseValidationError is the validation error returned by
// TokenResponse.Validate if the designated constraints aren't met.
type TokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenResponseValidationError) ErrorName() string { return "TokenResponseValidationError" }

// Error satisfies the builtin error interface
func (e TokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenResponseValidationError{}

// Validate checks the field values on MetaResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MetaResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetaResponseValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MetaResponseValidationError is the validation error returned by
// MetaResponse.Validate if the designated constraints aren't met.
type MetaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetaResponseValidationError) ErrorName() string { return "MetaResponseValidationError" }

// Error satisfies the builtin error interface
func (e MetaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetaResponseValidationError{}

// Validate checks the field values on ContactResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ContactResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContactResponseValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetContacts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContactResponseValidationError{
					field:  fmt.Sprintf("Contacts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ContactResponseValidationError is the validation error returned by
// ContactResponse.Validate if the designated constraints aren't met.
type ContactResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactResponseValidationError) ErrorName() string { return "ContactResponseValidationError" }

// Error satisfies the builtin error interface
func (e ContactResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactResponseValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LoginResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginResponseValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoginResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on IdResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *IdResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IdResponseValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMedia() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IdResponseValidationError{
					field:  fmt.Sprintf("Media[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// IdResponseValidationError is the validation error returned by
// IdResponse.Validate if the designated constraints aren't met.
type IdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdResponseValidationError) ErrorName() string { return "IdResponseValidationError" }

// Error satisfies the builtin error interface
func (e IdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdResponseValidationError{}

// Validate checks the field values on ErrorResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ErrorResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorResponseValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ErrorResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ErrorResponseValidationError is the validation error returned by
// ErrorResponse.Validate if the designated constraints aren't met.
type ErrorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorResponseValidationError) ErrorName() string { return "ErrorResponseValidationError" }

// Error satisfies the builtin error interface
func (e ErrorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorResponseValidationError{}

// Validate checks the field values on ChangePwdRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ChangePwdRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetNewPassword()) < 8 {
		return ChangePwdRequestValidationError{
			field:  "NewPassword",
			reason: "value length must be at least 8 runes",
		}
	}

	return nil
}

// ChangePwdRequestValidationError is the validation error returned by
// ChangePwdRequest.Validate if the designated constraints aren't met.
type ChangePwdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePwdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePwdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePwdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePwdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePwdRequestValidationError) ErrorName() string { return "ChangePwdRequestValidationError" }

// Error satisfies the builtin error interface
func (e ChangePwdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePwdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePwdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePwdRequestValidationError{}

// Validate checks the field values on BackupRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BackupRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetPassword()) < 8 {
		return BackupRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 8 runes",
		}
	}

	// no validation rules for Data

	return nil
}

// BackupRequestValidationError is the validation error returned by
// BackupRequest.Validate if the designated constraints aren't met.
type BackupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BackupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BackupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BackupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BackupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BackupRequestValidationError) ErrorName() string { return "BackupRequestValidationError" }

// Error satisfies the builtin error interface
func (e BackupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBackupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BackupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BackupRequestValidationError{}

// Validate checks the field values on BackupResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BackupResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BackupResponseValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BackupResponseValidationError is the validation error returned by
// BackupResponse.Validate if the designated constraints aren't met.
type BackupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BackupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BackupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BackupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BackupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BackupResponseValidationError) ErrorName() string { return "BackupResponseValidationError" }

// Error satisfies the builtin error interface
func (e BackupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBackupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BackupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BackupResponseValidationError{}

// Validate checks the field values on RestoreRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RestoreRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Password

	// no validation rules for Data

	return nil
}

// RestoreRequestValidationError is the validation error returned by
// RestoreRequest.Validate if the designated constraints aren't met.
type RestoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestoreRequestValidationError) ErrorName() string { return "RestoreRequestValidationError" }

// Error satisfies the builtin error interface
func (e RestoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestoreRequestValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *User) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetUsername()) < 5 {
		return UserValidationError{
			field:  "Username",
			reason: "value length must be at least 5 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPassword()) < 8 {
		return UserValidationError{
			field:  "Password",
			reason: "value length must be at least 8 runes",
		}
	}

	return nil
}

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on Context with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Context) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for From

	// no validation rules for Id

	// no validation rules for Forwarded

	// no validation rules for FrequentlyForwarded

	return nil
}

// ContextValidationError is the validation error returned by Context.Validate
// if the designated constraints aren't met.
type ContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContextValidationError) ErrorName() string { return "ContextValidationError" }

// Error satisfies the builtin error interface
func (e ContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContextValidationError{}

// Validate checks the field values on Status with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Status) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Status

	// no validation rules for RecipientId

	// no validation rules for Timestamp

	return nil
}

// StatusValidationError is the validation error returned by Status.Validate if
// the designated constraints aren't met.
type StatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusValidationError) ErrorName() string { return "StatusValidationError" }

// Error satisfies the builtin error interface
func (e StatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusValidationError{}

// Validate checks the field values on Provider with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Provider) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// ProviderValidationError is the validation error returned by
// Provider.Validate if the designated constraints aren't met.
type ProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProviderValidationError) ErrorName() string { return "ProviderValidationError" }

// Error satisfies the builtin error interface
func (e ProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProviderValidationError{}

// Validate checks the field values on TextMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TextMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Body

	return nil
}

// TextMessageValidationError is the validation error returned by
// TextMessage.Validate if the designated constraints aren't met.
type TextMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TextMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TextMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TextMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TextMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TextMessageValidationError) ErrorName() string { return "TextMessageValidationError" }

// Error satisfies the builtin error interface
func (e TextMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTextMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TextMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TextMessageValidationError{}

// Validate checks the field values on ImageMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ImageMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for File

	// no validation rules for Id

	// no validation rules for Link

	// no validation rules for MimeType

	// no validation rules for Sha256

	// no validation rules for Caption

	if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImageMessageValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ImageMessageValidationError is the validation error returned by
// ImageMessage.Validate if the designated constraints aren't met.
type ImageMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageMessageValidationError) ErrorName() string { return "ImageMessageValidationError" }

// Error satisfies the builtin error interface
func (e ImageMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageMessageValidationError{}

// Validate checks the field values on AudioMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AudioMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for File

	// no validation rules for Id

	// no validation rules for Link

	// no validation rules for MimeType

	// no validation rules for Sha256

	if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AudioMessageValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AudioMessageValidationError is the validation error returned by
// AudioMessage.Validate if the designated constraints aren't met.
type AudioMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AudioMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AudioMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AudioMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AudioMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AudioMessageValidationError) ErrorName() string { return "AudioMessageValidationError" }

// Error satisfies the builtin error interface
func (e AudioMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudioMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AudioMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AudioMessageValidationError{}

// Validate checks the field values on VideoMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *VideoMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for File

	// no validation rules for Id

	// no validation rules for Link

	// no validation rules for MimeType

	// no validation rules for Sha256

	// no validation rules for Caption

	if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VideoMessageValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VideoMessageValidationError is the validation error returned by
// VideoMessage.Validate if the designated constraints aren't met.
type VideoMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoMessageValidationError) ErrorName() string { return "VideoMessageValidationError" }

// Error satisfies the builtin error interface
func (e VideoMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoMessageValidationError{}

// Validate checks the field values on VoiceMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *VoiceMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for File

	// no validation rules for Id

	// no validation rules for Link

	// no validation rules for MimeType

	// no validation rules for Sha256

	return nil
}

// VoiceMessageValidationError is the validation error returned by
// VoiceMessage.Validate if the designated constraints aren't met.
type VoiceMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoiceMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoiceMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoiceMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoiceMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoiceMessageValidationError) ErrorName() string { return "VoiceMessageValidationError" }

// Error satisfies the builtin error interface
func (e VoiceMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoiceMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoiceMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoiceMessageValidationError{}

// Validate checks the field values on DocumentMessage with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DocumentMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for File

	// no validation rules for Id

	// no validation rules for Link

	// no validation rules for MimeType

	// no validation rules for Sha256

	// no validation rules for Caption

	// no validation rules for Filename

	if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentMessageValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DocumentMessageValidationError is the validation error returned by
// DocumentMessage.Validate if the designated constraints aren't met.
type DocumentMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentMessageValidationError) ErrorName() string { return "DocumentMessageValidationError" }

// Error satisfies the builtin error interface
func (e DocumentMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocumentMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentMessageValidationError{}

// Validate checks the field values on MediaParameter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MediaParameter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Filename

	// no validation rules for Caption

	return nil
}

// MediaParameterValidationError is the validation error returned by
// MediaParameter.Validate if the designated constraints aren't met.
type MediaParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MediaParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MediaParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MediaParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MediaParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MediaParameterValidationError) ErrorName() string { return "MediaParameterValidationError" }

// Error satisfies the builtin error interface
func (e MediaParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMediaParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MediaParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MediaParameterValidationError{}

// Validate checks the field values on TemplateMessage with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TemplateMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Namespace

	// no validation rules for Name

	if v, ok := interface{}(m.GetLanguage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemplateMessageValidationError{
				field:  "Language",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetComponents() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateMessageValidationError{
					field:  fmt.Sprintf("Components[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TemplateMessageValidationError is the validation error returned by
// TemplateMessage.Validate if the designated constraints aren't met.
type TemplateMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateMessageValidationError) ErrorName() string { return "TemplateMessageValidationError" }

// Error satisfies the builtin error interface
func (e TemplateMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateMessageValidationError{}

// Validate checks the field values on InteractiveMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *InteractiveMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InteractiveMessageValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InteractiveMessageValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFooter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InteractiveMessageValidationError{
				field:  "Footer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InteractiveMessageValidationError{
				field:  "Action",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// InteractiveMessageValidationError is the validation error returned by
// InteractiveMessage.Validate if the designated constraints aren't met.
type InteractiveMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InteractiveMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InteractiveMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InteractiveMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InteractiveMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InteractiveMessageValidationError) ErrorName() string {
	return "InteractiveMessageValidationError"
}

// Error satisfies the builtin error interface
func (e InteractiveMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInteractiveMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InteractiveMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InteractiveMessageValidationError{}

// Validate checks the field values on LocationMessage with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *LocationMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Address

	// no validation rules for Latitude

	// no validation rules for Longitude

	// no validation rules for Name

	return nil
}

// LocationMessageValidationError is the validation error returned by
// LocationMessage.Validate if the designated constraints aren't met.
type LocationMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationMessageValidationError) ErrorName() string { return "LocationMessageValidationError" }

// Error satisfies the builtin error interface
func (e LocationMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocationMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationMessageValidationError{}

// Validate checks the field values on SystemMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SystemMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Body

	return nil
}

// SystemMessageValidationError is the validation error returned by
// SystemMessage.Validate if the designated constraints aren't met.
type SystemMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemMessageValidationError) ErrorName() string { return "SystemMessageValidationError" }

// Error satisfies the builtin error interface
func (e SystemMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemMessageValidationError{}

// Validate checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Error) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Title

	// no validation rules for Details

	// no validation rules for Href

	return nil
}

// ErrorValidationError is the validation error returned by Error.Validate if
// the designated constraints aren't met.
type ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorValidationError) ErrorName() string { return "ErrorValidationError" }

// Error satisfies the builtin error interface
func (e ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorValidationError{}

// Validate checks the field values on StickerMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StickerMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Link

	if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StickerMessageValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// StickerMessageValidationError is the validation error returned by
// StickerMessage.Validate if the designated constraints aren't met.
type StickerMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StickerMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StickerMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StickerMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StickerMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StickerMessageValidationError) ErrorName() string { return "StickerMessageValidationError" }

// Error satisfies the builtin error interface
func (e StickerMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStickerMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StickerMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StickerMessageValidationError{}

// Validate checks the field values on MessageWrapper with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MessageWrapper) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageWrapperValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MessageWrapperValidationError is the validation error returned by
// MessageWrapper.Validate if the designated constraints aren't met.
type MessageWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageWrapperValidationError) ErrorName() string { return "MessageWrapperValidationError" }

// Error satisfies the builtin error interface
func (e MessageWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageWrapperValidationError{}

// Validate checks the field values on MessageMeta with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MessageMeta) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for To

	// no validation rules for Type

	return nil
}

// MessageMetaValidationError is the validation error returned by
// MessageMeta.Validate if the designated constraints aren't met.
type MessageMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageMetaValidationError) ErrorName() string { return "MessageMetaValidationError" }

// Error satisfies the builtin error interface
func (e MessageMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageMetaValidationError{}

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Message) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for From

	// no validation rules for To

	if v, ok := interface{}(m.GetContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Context",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for Timestamp

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Text",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAudio()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Audio",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetVoice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Voice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Document",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSystem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "System",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSticker()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Sticker",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInteractive()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Interactive",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RecipientType

	// no validation rules for PreviewUrl

	return nil
}

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}

// Validate checks the field values on RegistrationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RegistrationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Cc

	// no validation rules for PhoneNumber

	// no validation rules for Method

	// no validation rules for Cert

	// no validation rules for Pin

	return nil
}

// RegistrationRequestValidationError is the validation error returned by
// RegistrationRequest.Validate if the designated constraints aren't met.
type RegistrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistrationRequestValidationError) ErrorName() string {
	return "RegistrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegistrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistrationRequestValidationError{}

// Validate checks the field values on VerifyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *VerifyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	return nil
}

// VerifyRequestValidationError is the validation error returned by
// VerifyRequest.Validate if the designated constraints aren't met.
type VerifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyRequestValidationError) ErrorName() string { return "VerifyRequestValidationError" }

// Error satisfies the builtin error interface
func (e VerifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyRequestValidationError{}

// Validate checks the field values on ApplicationSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationSettings) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CallbackBackoffDelayMs

	// no validation rules for MaxCallbackBackoffDelayMs

	// no validation rules for CallbackPersist

	if v, ok := interface{}(m.GetMedia()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationSettingsValidationError{
				field:  "Media",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebhooks()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationSettingsValidationError{
				field:  "Webhooks",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PassThrough

	// no validation rules for SentStatus

	// no validation rules for DbGarbagecollectorEnable

	// no validation rules for NotifyUserChangeNumber

	// no validation rules for ShowSecurityNotifications

	return nil
}

// ApplicationSettingsValidationError is the validation error returned by
// ApplicationSettings.Validate if the designated constraints aren't met.
type ApplicationSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationSettingsValidationError) ErrorName() string {
	return "ApplicationSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationSettingsValidationError{}

// Validate checks the field values on ProfileAbout with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProfileAbout) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Text

	return nil
}

// ProfileAboutValidationError is the validation error returned by
// ProfileAbout.Validate if the designated constraints aren't met.
type ProfileAboutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileAboutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileAboutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileAboutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileAboutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileAboutValidationError) ErrorName() string { return "ProfileAboutValidationError" }

// Error satisfies the builtin error interface
func (e ProfileAboutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileAbout.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileAboutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileAboutValidationError{}

// Validate checks the field values on BusinessProfile with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *BusinessProfile) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Address

	// no validation rules for Description

	// no validation rules for Email

	// no validation rules for Vertical

	return nil
}

// BusinessProfileValidationError is the validation error returned by
// BusinessProfile.Validate if the designated constraints aren't met.
type BusinessProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessProfileValidationError) ErrorName() string { return "BusinessProfileValidationError" }

// Error satisfies the builtin error interface
func (e BusinessProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessProfileValidationError{}

// Validate checks the field values on Contact_Profile with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Contact_Profile) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// Contact_ProfileValidationError is the validation error returned by
// Contact_Profile.Validate if the designated constraints aren't met.
type Contact_ProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Contact_ProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Contact_ProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Contact_ProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Contact_ProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Contact_ProfileValidationError) ErrorName() string { return "Contact_ProfileValidationError" }

// Error satisfies the builtin error interface
func (e Contact_ProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContact_Profile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Contact_ProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Contact_ProfileValidationError{}

// Validate checks the field values on BackupResponse_SettingsData with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BackupResponse_SettingsData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Data

	return nil
}

// BackupResponse_SettingsDataValidationError is the validation error returned
// by BackupResponse_SettingsData.Validate if the designated constraints
// aren't met.
type BackupResponse_SettingsDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BackupResponse_SettingsDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BackupResponse_SettingsDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BackupResponse_SettingsDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BackupResponse_SettingsDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BackupResponse_SettingsDataValidationError) ErrorName() string {
	return "BackupResponse_SettingsDataValidationError"
}

// Error satisfies the builtin error interface
func (e BackupResponse_SettingsDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBackupResponse_SettingsData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BackupResponse_SettingsDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BackupResponse_SettingsDataValidationError{}

// Validate checks the field values on TemplateMessage_Language with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TemplateMessage_Language) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Policy

	// no validation rules for Code

	return nil
}

// TemplateMessage_LanguageValidationError is the validation error returned by
// TemplateMessage_Language.Validate if the designated constraints aren't met.
type TemplateMessage_LanguageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateMessage_LanguageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateMessage_LanguageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateMessage_LanguageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateMessage_LanguageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateMessage_LanguageValidationError) ErrorName() string {
	return "TemplateMessage_LanguageValidationError"
}

// Error satisfies the builtin error interface
func (e TemplateMessage_LanguageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateMessage_Language.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateMessage_LanguageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateMessage_LanguageValidationError{}

// Validate checks the field values on TemplateMessage_Component with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TemplateMessage_Component) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	// no validation rules for Subtype

	// no validation rules for Index

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateMessage_ComponentValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TemplateMessage_ComponentValidationError is the validation error returned by
// TemplateMessage_Component.Validate if the designated constraints aren't met.
type TemplateMessage_ComponentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateMessage_ComponentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateMessage_ComponentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateMessage_ComponentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateMessage_ComponentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateMessage_ComponentValidationError) ErrorName() string {
	return "TemplateMessage_ComponentValidationError"
}

// Error satisfies the builtin error interface
func (e TemplateMessage_ComponentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateMessage_Component.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateMessage_ComponentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateMessage_ComponentValidationError{}

// Validate checks the field values on TemplateMessage_Component_Parameters
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *TemplateMessage_Component_Parameters) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	// no validation rules for Text

	if v, ok := interface{}(m.GetCurrency()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemplateMessage_Component_ParametersValidationError{
				field:  "Currency",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemplateMessage_Component_ParametersValidationError{
				field:  "DateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemplateMessage_Component_ParametersValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemplateMessage_Component_ParametersValidationError{
				field:  "Document",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemplateMessage_Component_ParametersValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Payload

	return nil
}

// TemplateMessage_Component_ParametersValidationError is the validation error
// returned by TemplateMessage_Component_Parameters.Validate if the designated
// constraints aren't met.
type TemplateMessage_Component_ParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateMessage_Component_ParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateMessage_Component_ParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateMessage_Component_ParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateMessage_Component_ParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateMessage_Component_ParametersValidationError) ErrorName() string {
	return "TemplateMessage_Component_ParametersValidationError"
}

// Error satisfies the builtin error interface
func (e TemplateMessage_Component_ParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateMessage_Component_Parameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateMessage_Component_ParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateMessage_Component_ParametersValidationError{}

// Validate checks the field values on
// TemplateMessage_Component_Parameters_CurrencyParameter with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TemplateMessage_Component_Parameters_CurrencyParameter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FallbackValue

	// no validation rules for Code

	// no validation rules for Amount_1000

	return nil
}

// TemplateMessage_Component_Parameters_CurrencyParameterValidationError is the
// validation error returned by
// TemplateMessage_Component_Parameters_CurrencyParameter.Validate if the
// designated constraints aren't met.
type TemplateMessage_Component_Parameters_CurrencyParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateMessage_Component_Parameters_CurrencyParameterValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e TemplateMessage_Component_Parameters_CurrencyParameterValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e TemplateMessage_Component_Parameters_CurrencyParameterValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e TemplateMessage_Component_Parameters_CurrencyParameterValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e TemplateMessage_Component_Parameters_CurrencyParameterValidationError) ErrorName() string {
	return "TemplateMessage_Component_Parameters_CurrencyParameterValidationError"
}

// Error satisfies the builtin error interface
func (e TemplateMessage_Component_Parameters_CurrencyParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateMessage_Component_Parameters_CurrencyParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateMessage_Component_Parameters_CurrencyParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateMessage_Component_Parameters_CurrencyParameterValidationError{}

// Validate checks the field values on
// TemplateMessage_Component_Parameters_DateTimeParameter with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TemplateMessage_Component_Parameters_DateTimeParameter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FallbackValue

	// no validation rules for DayOfWeek

	// no validation rules for DayOfMonth

	// no validation rules for Month

	// no validation rules for Hour

	// no validation rules for Minute

	// no validation rules for Timestamp

	return nil
}

// TemplateMessage_Component_Parameters_DateTimeParameterValidationError is the
// validation error returned by
// TemplateMessage_Component_Parameters_DateTimeParameter.Validate if the
// designated constraints aren't met.
type TemplateMessage_Component_Parameters_DateTimeParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateMessage_Component_Parameters_DateTimeParameterValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e TemplateMessage_Component_Parameters_DateTimeParameterValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e TemplateMessage_Component_Parameters_DateTimeParameterValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e TemplateMessage_Component_Parameters_DateTimeParameterValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e TemplateMessage_Component_Parameters_DateTimeParameterValidationError) ErrorName() string {
	return "TemplateMessage_Component_Parameters_DateTimeParameterValidationError"
}

// Error satisfies the builtin error interface
func (e TemplateMessage_Component_Parameters_DateTimeParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateMessage_Component_Parameters_DateTimeParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateMessage_Component_Parameters_DateTimeParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateMessage_Component_Parameters_DateTimeParameterValidationError{}

// Validate checks the field values on InteractiveMessage_HeaderParameter with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *InteractiveMessage_HeaderParameter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	// no validation rules for Text

	if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InteractiveMessage_HeaderParameterValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InteractiveMessage_HeaderParameterValidationError{
				field:  "Document",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InteractiveMessage_HeaderParameterValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// InteractiveMessage_HeaderParameterValidationError is the validation error
// returned by InteractiveMessage_HeaderParameter.Validate if the designated
// constraints aren't met.
type InteractiveMessage_HeaderParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InteractiveMessage_HeaderParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InteractiveMessage_HeaderParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InteractiveMessage_HeaderParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InteractiveMessage_HeaderParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InteractiveMessage_HeaderParameterValidationError) ErrorName() string {
	return "InteractiveMessage_HeaderParameterValidationError"
}

// Error satisfies the builtin error interface
func (e InteractiveMessage_HeaderParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInteractiveMessage_HeaderParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InteractiveMessage_HeaderParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InteractiveMessage_HeaderParameterValidationError{}

// Validate checks the field values on InteractiveMessage_TextParameter with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *InteractiveMessage_TextParameter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	// no validation rules for Text

	return nil
}

// InteractiveMessage_TextParameterValidationError is the validation error
// returned by InteractiveMessage_TextParameter.Validate if the designated
// constraints aren't met.
type InteractiveMessage_TextParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InteractiveMessage_TextParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InteractiveMessage_TextParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InteractiveMessage_TextParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InteractiveMessage_TextParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InteractiveMessage_TextParameterValidationError) ErrorName() string {
	return "InteractiveMessage_TextParameterValidationError"
}

// Error satisfies the builtin error interface
func (e InteractiveMessage_TextParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInteractiveMessage_TextParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InteractiveMessage_TextParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InteractiveMessage_TextParameterValidationError{}

// Validate checks the field values on InteractiveMessage_Section with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *InteractiveMessage_Section) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	for idx, item := range m.GetRows() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InteractiveMessage_SectionValidationError{
					field:  fmt.Sprintf("Rows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// InteractiveMessage_SectionValidationError is the validation error returned
// by InteractiveMessage_Section.Validate if the designated constraints aren't met.
type InteractiveMessage_SectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InteractiveMessage_SectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InteractiveMessage_SectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InteractiveMessage_SectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InteractiveMessage_SectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InteractiveMessage_SectionValidationError) ErrorName() string {
	return "InteractiveMessage_SectionValidationError"
}

// Error satisfies the builtin error interface
func (e InteractiveMessage_SectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInteractiveMessage_Section.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InteractiveMessage_SectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InteractiveMessage_SectionValidationError{}

// Validate checks the field values on InteractiveMessage_ButtonsAction with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *InteractiveMessage_ButtonsAction) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	if v, ok := interface{}(m.GetReply()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InteractiveMessage_ButtonsActionValidationError{
				field:  "Reply",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// InteractiveMessage_ButtonsActionValidationError is the validation error
// returned by InteractiveMessage_ButtonsAction.Validate if the designated
// constraints aren't met.
type InteractiveMessage_ButtonsActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InteractiveMessage_ButtonsActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InteractiveMessage_ButtonsActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InteractiveMessage_ButtonsActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InteractiveMessage_ButtonsActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InteractiveMessage_ButtonsActionValidationError) ErrorName() string {
	return "InteractiveMessage_ButtonsActionValidationError"
}

// Error satisfies the builtin error interface
func (e InteractiveMessage_ButtonsActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInteractiveMessage_ButtonsAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InteractiveMessage_ButtonsActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InteractiveMessage_ButtonsActionValidationError{}

// Validate checks the field values on InteractiveMessage_ActionWrapper with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *InteractiveMessage_ActionWrapper) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Button

	for idx, item := range m.GetButtons() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InteractiveMessage_ActionWrapperValidationError{
					field:  fmt.Sprintf("Buttons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSections() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InteractiveMessage_ActionWrapperValidationError{
					field:  fmt.Sprintf("Sections[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// InteractiveMessage_ActionWrapperValidationError is the validation error
// returned by InteractiveMessage_ActionWrapper.Validate if the designated
// constraints aren't met.
type InteractiveMessage_ActionWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InteractiveMessage_ActionWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InteractiveMessage_ActionWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InteractiveMessage_ActionWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InteractiveMessage_ActionWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InteractiveMessage_ActionWrapperValidationError) ErrorName() string {
	return "InteractiveMessage_ActionWrapperValidationError"
}

// Error satisfies the builtin error interface
func (e InteractiveMessage_ActionWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInteractiveMessage_ActionWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InteractiveMessage_ActionWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InteractiveMessage_ActionWrapperValidationError{}

// Validate checks the field values on InteractiveMessage_Section_SectionRow
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *InteractiveMessage_Section_SectionRow) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Desciption

	return nil
}

// InteractiveMessage_Section_SectionRowValidationError is the validation error
// returned by InteractiveMessage_Section_SectionRow.Validate if the
// designated constraints aren't met.
type InteractiveMessage_Section_SectionRowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InteractiveMessage_Section_SectionRowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InteractiveMessage_Section_SectionRowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InteractiveMessage_Section_SectionRowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InteractiveMessage_Section_SectionRowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InteractiveMessage_Section_SectionRowValidationError) ErrorName() string {
	return "InteractiveMessage_Section_SectionRowValidationError"
}

// Error satisfies the builtin error interface
func (e InteractiveMessage_Section_SectionRowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInteractiveMessage_Section_SectionRow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InteractiveMessage_Section_SectionRowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InteractiveMessage_Section_SectionRowValidationError{}

// Validate checks the field values on
// InteractiveMessage_ButtonsAction_ButtonsActionReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *InteractiveMessage_ButtonsAction_ButtonsActionReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Title

	return nil
}

// InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError is the
// validation error returned by
// InteractiveMessage_ButtonsAction_ButtonsActionReply.Validate if the
// designated constraints aren't met.
type InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError) ErrorName() string {
	return "InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInteractiveMessage_ButtonsAction_ButtonsActionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError{}

// Validate checks the field values on ApplicationSettings_Media with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationSettings_Media) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ApplicationSettings_MediaValidationError is the validation error returned by
// ApplicationSettings_Media.Validate if the designated constraints aren't met.
type ApplicationSettings_MediaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationSettings_MediaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationSettings_MediaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationSettings_MediaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationSettings_MediaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationSettings_MediaValidationError) ErrorName() string {
	return "ApplicationSettings_MediaValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationSettings_MediaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationSettings_Media.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationSettings_MediaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationSettings_MediaValidationError{}

// Validate checks the field values on ApplicationSettings_Webhooks with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationSettings_Webhooks) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Url

	// no validation rules for MaxConcurrentRequests

	return nil
}

// ApplicationSettings_WebhooksValidationError is the validation error returned
// by ApplicationSettings_Webhooks.Validate if the designated constraints
// aren't met.
type ApplicationSettings_WebhooksValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationSettings_WebhooksValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationSettings_WebhooksValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationSettings_WebhooksValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationSettings_WebhooksValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationSettings_WebhooksValidationError) ErrorName() string {
	return "ApplicationSettings_WebhooksValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationSettings_WebhooksValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationSettings_Webhooks.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationSettings_WebhooksValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationSettings_WebhooksValidationError{}
