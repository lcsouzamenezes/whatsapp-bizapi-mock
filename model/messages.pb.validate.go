// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: messages.proto

package model

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Context with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Context) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for From

	// no validation rules for Id

	// no validation rules for Forwarded

	// no validation rules for FrequentlyForwarded

	return nil
}

// ContextValidationError is the validation error returned by Context.Validate
// if the designated constraints aren't met.
type ContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContextValidationError) ErrorName() string { return "ContextValidationError" }

// Error satisfies the builtin error interface
func (e ContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContextValidationError{}

// Validate checks the field values on Provider with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Provider) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// ProviderValidationError is the validation error returned by
// Provider.Validate if the designated constraints aren't met.
type ProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProviderValidationError) ErrorName() string { return "ProviderValidationError" }

// Error satisfies the builtin error interface
func (e ProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProviderValidationError{}

// Validate checks the field values on TextMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TextMessage) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetBody()) < 1 {
		return TextMessageValidationError{
			field:  "Body",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// TextMessageValidationError is the validation error returned by
// TextMessage.Validate if the designated constraints aren't met.
type TextMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TextMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TextMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TextMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TextMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TextMessageValidationError) ErrorName() string { return "TextMessageValidationError" }

// Error satisfies the builtin error interface
func (e TextMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTextMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TextMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TextMessageValidationError{}

// Validate checks the field values on ImageMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ImageMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for File

	if utf8.RuneCountInString(m.GetId()) < 10 {
		return ImageMessageValidationError{
			field:  "Id",
			reason: "value length must be at least 10 runes",
		}
	}

	// no validation rules for Link

	// no validation rules for MimeType

	// no validation rules for Sha256

	// no validation rules for Caption

	if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImageMessageValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ImageMessageValidationError is the validation error returned by
// ImageMessage.Validate if the designated constraints aren't met.
type ImageMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageMessageValidationError) ErrorName() string { return "ImageMessageValidationError" }

// Error satisfies the builtin error interface
func (e ImageMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageMessageValidationError{}

// Validate checks the field values on AudioMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AudioMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for File

	if utf8.RuneCountInString(m.GetId()) < 10 {
		return AudioMessageValidationError{
			field:  "Id",
			reason: "value length must be at least 10 runes",
		}
	}

	// no validation rules for Link

	// no validation rules for MimeType

	// no validation rules for Sha256

	if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AudioMessageValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AudioMessageValidationError is the validation error returned by
// AudioMessage.Validate if the designated constraints aren't met.
type AudioMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AudioMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AudioMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AudioMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AudioMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AudioMessageValidationError) ErrorName() string { return "AudioMessageValidationError" }

// Error satisfies the builtin error interface
func (e AudioMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudioMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AudioMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AudioMessageValidationError{}

// Validate checks the field values on VideoMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *VideoMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for File

	if utf8.RuneCountInString(m.GetId()) < 10 {
		return VideoMessageValidationError{
			field:  "Id",
			reason: "value length must be at least 10 runes",
		}
	}

	// no validation rules for Link

	// no validation rules for MimeType

	// no validation rules for Sha256

	// no validation rules for Caption

	if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VideoMessageValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VideoMessageValidationError is the validation error returned by
// VideoMessage.Validate if the designated constraints aren't met.
type VideoMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoMessageValidationError) ErrorName() string { return "VideoMessageValidationError" }

// Error satisfies the builtin error interface
func (e VideoMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoMessageValidationError{}

// Validate checks the field values on VoiceMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *VoiceMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for File

	if utf8.RuneCountInString(m.GetId()) < 10 {
		return VoiceMessageValidationError{
			field:  "Id",
			reason: "value length must be at least 10 runes",
		}
	}

	// no validation rules for Link

	// no validation rules for MimeType

	// no validation rules for Sha256

	return nil
}

// VoiceMessageValidationError is the validation error returned by
// VoiceMessage.Validate if the designated constraints aren't met.
type VoiceMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoiceMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoiceMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoiceMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoiceMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoiceMessageValidationError) ErrorName() string { return "VoiceMessageValidationError" }

// Error satisfies the builtin error interface
func (e VoiceMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoiceMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoiceMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoiceMessageValidationError{}

// Validate checks the field values on DocumentMessage with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DocumentMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for File

	if utf8.RuneCountInString(m.GetId()) < 10 {
		return DocumentMessageValidationError{
			field:  "Id",
			reason: "value length must be at least 10 runes",
		}
	}

	// no validation rules for Link

	// no validation rules for MimeType

	// no validation rules for Sha256

	// no validation rules for Caption

	// no validation rules for Filename

	if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentMessageValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DocumentMessageValidationError is the validation error returned by
// DocumentMessage.Validate if the designated constraints aren't met.
type DocumentMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentMessageValidationError) ErrorName() string { return "DocumentMessageValidationError" }

// Error satisfies the builtin error interface
func (e DocumentMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocumentMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentMessageValidationError{}

// Validate checks the field values on MediaParameter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MediaParameter) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) < 10 {
		return MediaParameterValidationError{
			field:  "Id",
			reason: "value length must be at least 10 runes",
		}
	}

	// no validation rules for Filename

	// no validation rules for Caption

	return nil
}

// MediaParameterValidationError is the validation error returned by
// MediaParameter.Validate if the designated constraints aren't met.
type MediaParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MediaParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MediaParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MediaParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MediaParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MediaParameterValidationError) ErrorName() string { return "MediaParameterValidationError" }

// Error satisfies the builtin error interface
func (e MediaParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMediaParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MediaParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MediaParameterValidationError{}

// Validate checks the field values on TemplateMessage with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TemplateMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Namespace

	// no validation rules for Name

	if v, ok := interface{}(m.GetLanguage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemplateMessageValidationError{
				field:  "Language",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetComponents() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateMessageValidationError{
					field:  fmt.Sprintf("Components[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TemplateMessageValidationError is the validation error returned by
// TemplateMessage.Validate if the designated constraints aren't met.
type TemplateMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateMessageValidationError) ErrorName() string { return "TemplateMessageValidationError" }

// Error satisfies the builtin error interface
func (e TemplateMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateMessageValidationError{}

// Validate checks the field values on InteractiveMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *InteractiveMessage) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _InteractiveMessage_Type_InLookup[m.GetType()]; !ok {
		return InteractiveMessageValidationError{
			field:  "Type",
			reason: "value must be in list [list button]",
		}
	}

	if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InteractiveMessageValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InteractiveMessageValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFooter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InteractiveMessageValidationError{
				field:  "Footer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InteractiveMessageValidationError{
				field:  "Action",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// InteractiveMessageValidationError is the validation error returned by
// InteractiveMessage.Validate if the designated constraints aren't met.
type InteractiveMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InteractiveMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InteractiveMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InteractiveMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InteractiveMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InteractiveMessageValidationError) ErrorName() string {
	return "InteractiveMessageValidationError"
}

// Error satisfies the builtin error interface
func (e InteractiveMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInteractiveMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InteractiveMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InteractiveMessageValidationError{}

var _InteractiveMessage_Type_InLookup = map[string]struct{}{
	"list":   {},
	"button": {},
}

// Validate checks the field values on LocationMessage with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *LocationMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Address

	// no validation rules for Latitude

	// no validation rules for Longitude

	// no validation rules for Name

	return nil
}

// LocationMessageValidationError is the validation error returned by
// LocationMessage.Validate if the designated constraints aren't met.
type LocationMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationMessageValidationError) ErrorName() string { return "LocationMessageValidationError" }

// Error satisfies the builtin error interface
func (e LocationMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocationMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationMessageValidationError{}

// Validate checks the field values on SystemMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SystemMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Body

	return nil
}

// SystemMessageValidationError is the validation error returned by
// SystemMessage.Validate if the designated constraints aren't met.
type SystemMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemMessageValidationError) ErrorName() string { return "SystemMessageValidationError" }

// Error satisfies the builtin error interface
func (e SystemMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemMessageValidationError{}

// Validate checks the field values on StickerMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StickerMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Link

	if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StickerMessageValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// StickerMessageValidationError is the validation error returned by
// StickerMessage.Validate if the designated constraints aren't met.
type StickerMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StickerMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StickerMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StickerMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StickerMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StickerMessageValidationError) ErrorName() string { return "StickerMessageValidationError" }

// Error satisfies the builtin error interface
func (e StickerMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStickerMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StickerMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StickerMessageValidationError{}

// Validate checks the field values on MessageWrapper with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MessageWrapper) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageWrapperValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MessageWrapperValidationError is the validation error returned by
// MessageWrapper.Validate if the designated constraints aren't met.
type MessageWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageWrapperValidationError) ErrorName() string { return "MessageWrapperValidationError" }

// Error satisfies the builtin error interface
func (e MessageWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageWrapperValidationError{}

// Validate checks the field values on Messagemeta with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Messagemeta) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for To

	// no validation rules for Type

	return nil
}

// MessagemetaValidationError is the validation error returned by
// Messagemeta.Validate if the designated constraints aren't met.
type MessagemetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessagemetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessagemetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessagemetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessagemetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessagemetaValidationError) ErrorName() string { return "MessagemetaValidationError" }

// Error satisfies the builtin error interface
func (e MessagemetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessagemeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessagemetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessagemetaValidationError{}

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Message) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for From

	if !_Message_To_Pattern.MatchString(m.GetTo()) {
		return MessageValidationError{
			field:  "To",
			reason: "value does not match regex pattern \"^\\\\+?(?:[0-9]){6,14}[0-9]$\"",
		}
	}

	if v, ok := interface{}(m.GetContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Context",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for Timestamp

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Text",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAudio()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Audio",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetVoice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Voice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Document",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSystem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "System",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSticker()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Sticker",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInteractive()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Interactive",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RecipientType

	// no validation rules for PreviewUrl

	return nil
}

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}

var _Message_To_Pattern = regexp.MustCompile("^\\+?(?:[0-9]){6,14}[0-9]$")

// Validate checks the field values on TemplateMessage_Language with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TemplateMessage_Language) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := TemplateMessage_Language_Policy_name[int32(m.GetPolicy())]; !ok {
		return TemplateMessage_LanguageValidationError{
			field:  "Policy",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := TemplateMessage_Language_Code_name[int32(m.GetCode())]; !ok {
		return TemplateMessage_LanguageValidationError{
			field:  "Code",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// TemplateMessage_LanguageValidationError is the validation error returned by
// TemplateMessage_Language.Validate if the designated constraints aren't met.
type TemplateMessage_LanguageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateMessage_LanguageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateMessage_LanguageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateMessage_LanguageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateMessage_LanguageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateMessage_LanguageValidationError) ErrorName() string {
	return "TemplateMessage_LanguageValidationError"
}

// Error satisfies the builtin error interface
func (e TemplateMessage_LanguageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateMessage_Language.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateMessage_LanguageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateMessage_LanguageValidationError{}

// Validate checks the field values on TemplateMessage_Component with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TemplateMessage_Component) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _TemplateMessage_Component_Type_InLookup[m.GetType()]; !ok {
		return TemplateMessage_ComponentValidationError{
			field:  "Type",
			reason: "value must be in list [header body footer button]",
		}
	}

	if m.GetSubType() != "" {

		if _, ok := _TemplateMessage_Component_SubType_InLookup[m.GetSubType()]; !ok {
			return TemplateMessage_ComponentValidationError{
				field:  "SubType",
				reason: "value must be in list [quick_reply url]",
			}
		}

	}

	// no validation rules for Index

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateMessage_ComponentValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TemplateMessage_ComponentValidationError is the validation error returned by
// TemplateMessage_Component.Validate if the designated constraints aren't met.
type TemplateMessage_ComponentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateMessage_ComponentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateMessage_ComponentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateMessage_ComponentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateMessage_ComponentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateMessage_ComponentValidationError) ErrorName() string {
	return "TemplateMessage_ComponentValidationError"
}

// Error satisfies the builtin error interface
func (e TemplateMessage_ComponentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateMessage_Component.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateMessage_ComponentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateMessage_ComponentValidationError{}

var _TemplateMessage_Component_Type_InLookup = map[string]struct{}{
	"header": {},
	"body":   {},
	"footer": {},
	"button": {},
}

var _TemplateMessage_Component_SubType_InLookup = map[string]struct{}{
	"quick_reply": {},
	"url":         {},
}

// Validate checks the field values on TemplateMessage_Component_Parameter with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *TemplateMessage_Component_Parameter) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _TemplateMessage_Component_Parameter_Type_InLookup[m.GetType()]; !ok {
		return TemplateMessage_Component_ParameterValidationError{
			field:  "Type",
			reason: "value must be in list [text image document video currency date_time]",
		}
	}

	switch m.Spec.(type) {

	case *TemplateMessage_Component_Parameter_Text:
		// no validation rules for Text

	case *TemplateMessage_Component_Parameter_Currency:

		if v, ok := interface{}(m.GetCurrency()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateMessage_Component_ParameterValidationError{
					field:  "Currency",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TemplateMessage_Component_Parameter_DateTime:

		if v, ok := interface{}(m.GetDateTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateMessage_Component_ParameterValidationError{
					field:  "DateTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TemplateMessage_Component_Parameter_Image:

		if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateMessage_Component_ParameterValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TemplateMessage_Component_Parameter_Document:

		if v, ok := interface{}(m.GetDocument()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateMessage_Component_ParameterValidationError{
					field:  "Document",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TemplateMessage_Component_Parameter_Video:

		if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateMessage_Component_ParameterValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TemplateMessage_Component_Parameter_Payload:
		// no validation rules for Payload

	}

	return nil
}

// TemplateMessage_Component_ParameterValidationError is the validation error
// returned by TemplateMessage_Component_Parameter.Validate if the designated
// constraints aren't met.
type TemplateMessage_Component_ParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateMessage_Component_ParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateMessage_Component_ParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateMessage_Component_ParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateMessage_Component_ParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateMessage_Component_ParameterValidationError) ErrorName() string {
	return "TemplateMessage_Component_ParameterValidationError"
}

// Error satisfies the builtin error interface
func (e TemplateMessage_Component_ParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateMessage_Component_Parameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateMessage_Component_ParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateMessage_Component_ParameterValidationError{}

var _TemplateMessage_Component_Parameter_Type_InLookup = map[string]struct{}{
	"text":      {},
	"image":     {},
	"document":  {},
	"video":     {},
	"currency":  {},
	"date_time": {},
}

// Validate checks the field values on
// TemplateMessage_Component_Parameter_CurrencyParameter with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TemplateMessage_Component_Parameter_CurrencyParameter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FallbackValue

	// no validation rules for Code

	// no validation rules for Amount_1000

	return nil
}

// TemplateMessage_Component_Parameter_CurrencyParameterValidationError is the
// validation error returned by
// TemplateMessage_Component_Parameter_CurrencyParameter.Validate if the
// designated constraints aren't met.
type TemplateMessage_Component_Parameter_CurrencyParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateMessage_Component_Parameter_CurrencyParameterValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e TemplateMessage_Component_Parameter_CurrencyParameterValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e TemplateMessage_Component_Parameter_CurrencyParameterValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e TemplateMessage_Component_Parameter_CurrencyParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateMessage_Component_Parameter_CurrencyParameterValidationError) ErrorName() string {
	return "TemplateMessage_Component_Parameter_CurrencyParameterValidationError"
}

// Error satisfies the builtin error interface
func (e TemplateMessage_Component_Parameter_CurrencyParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateMessage_Component_Parameter_CurrencyParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateMessage_Component_Parameter_CurrencyParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateMessage_Component_Parameter_CurrencyParameterValidationError{}

// Validate checks the field values on
// TemplateMessage_Component_Parameter_DateTimeParameter with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TemplateMessage_Component_Parameter_DateTimeParameter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FallbackValue

	// no validation rules for DayOfWeek

	// no validation rules for DayOfMonth

	// no validation rules for Year

	// no validation rules for Month

	// no validation rules for Hour

	// no validation rules for Minute

	// no validation rules for Timestamp

	// no validation rules for Calendar

	return nil
}

// TemplateMessage_Component_Parameter_DateTimeParameterValidationError is the
// validation error returned by
// TemplateMessage_Component_Parameter_DateTimeParameter.Validate if the
// designated constraints aren't met.
type TemplateMessage_Component_Parameter_DateTimeParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateMessage_Component_Parameter_DateTimeParameterValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e TemplateMessage_Component_Parameter_DateTimeParameterValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e TemplateMessage_Component_Parameter_DateTimeParameterValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e TemplateMessage_Component_Parameter_DateTimeParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateMessage_Component_Parameter_DateTimeParameterValidationError) ErrorName() string {
	return "TemplateMessage_Component_Parameter_DateTimeParameterValidationError"
}

// Error satisfies the builtin error interface
func (e TemplateMessage_Component_Parameter_DateTimeParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateMessage_Component_Parameter_DateTimeParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateMessage_Component_Parameter_DateTimeParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateMessage_Component_Parameter_DateTimeParameterValidationError{}

// Validate checks the field values on InteractiveMessage_HeaderParameter with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *InteractiveMessage_HeaderParameter) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _InteractiveMessage_HeaderParameter_Type_InLookup[m.GetType()]; !ok {
		return InteractiveMessage_HeaderParameterValidationError{
			field:  "Type",
			reason: "value must be in list [text video image document]",
		}
	}

	// no validation rules for Text

	if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InteractiveMessage_HeaderParameterValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InteractiveMessage_HeaderParameterValidationError{
				field:  "Document",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InteractiveMessage_HeaderParameterValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// InteractiveMessage_HeaderParameterValidationError is the validation error
// returned by InteractiveMessage_HeaderParameter.Validate if the designated
// constraints aren't met.
type InteractiveMessage_HeaderParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InteractiveMessage_HeaderParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InteractiveMessage_HeaderParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InteractiveMessage_HeaderParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InteractiveMessage_HeaderParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InteractiveMessage_HeaderParameterValidationError) ErrorName() string {
	return "InteractiveMessage_HeaderParameterValidationError"
}

// Error satisfies the builtin error interface
func (e InteractiveMessage_HeaderParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInteractiveMessage_HeaderParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InteractiveMessage_HeaderParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InteractiveMessage_HeaderParameterValidationError{}

var _InteractiveMessage_HeaderParameter_Type_InLookup = map[string]struct{}{
	"text":     {},
	"video":    {},
	"image":    {},
	"document": {},
}

// Validate checks the field values on InteractiveMessage_TextParameter with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *InteractiveMessage_TextParameter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Text

	return nil
}

// InteractiveMessage_TextParameterValidationError is the validation error
// returned by InteractiveMessage_TextParameter.Validate if the designated
// constraints aren't met.
type InteractiveMessage_TextParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InteractiveMessage_TextParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InteractiveMessage_TextParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InteractiveMessage_TextParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InteractiveMessage_TextParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InteractiveMessage_TextParameterValidationError) ErrorName() string {
	return "InteractiveMessage_TextParameterValidationError"
}

// Error satisfies the builtin error interface
func (e InteractiveMessage_TextParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInteractiveMessage_TextParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InteractiveMessage_TextParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InteractiveMessage_TextParameterValidationError{}

// Validate checks the field values on InteractiveMessage_Section with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *InteractiveMessage_Section) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	for idx, item := range m.GetRows() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InteractiveMessage_SectionValidationError{
					field:  fmt.Sprintf("Rows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// InteractiveMessage_SectionValidationError is the validation error returned
// by InteractiveMessage_Section.Validate if the designated constraints aren't met.
type InteractiveMessage_SectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InteractiveMessage_SectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InteractiveMessage_SectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InteractiveMessage_SectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InteractiveMessage_SectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InteractiveMessage_SectionValidationError) ErrorName() string {
	return "InteractiveMessage_SectionValidationError"
}

// Error satisfies the builtin error interface
func (e InteractiveMessage_SectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInteractiveMessage_Section.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InteractiveMessage_SectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InteractiveMessage_SectionValidationError{}

// Validate checks the field values on InteractiveMessage_ButtonsAction with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *InteractiveMessage_ButtonsAction) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetType() != "reply" {
		return InteractiveMessage_ButtonsActionValidationError{
			field:  "Type",
			reason: "value must equal reply",
		}
	}

	if v, ok := interface{}(m.GetReply()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InteractiveMessage_ButtonsActionValidationError{
				field:  "Reply",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// InteractiveMessage_ButtonsActionValidationError is the validation error
// returned by InteractiveMessage_ButtonsAction.Validate if the designated
// constraints aren't met.
type InteractiveMessage_ButtonsActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InteractiveMessage_ButtonsActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InteractiveMessage_ButtonsActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InteractiveMessage_ButtonsActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InteractiveMessage_ButtonsActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InteractiveMessage_ButtonsActionValidationError) ErrorName() string {
	return "InteractiveMessage_ButtonsActionValidationError"
}

// Error satisfies the builtin error interface
func (e InteractiveMessage_ButtonsActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInteractiveMessage_ButtonsAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InteractiveMessage_ButtonsActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InteractiveMessage_ButtonsActionValidationError{}

// Validate checks the field values on InteractiveMessage_ActionWrapper with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *InteractiveMessage_ActionWrapper) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Button

	for idx, item := range m.GetButtons() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InteractiveMessage_ActionWrapperValidationError{
					field:  fmt.Sprintf("Buttons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSections() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InteractiveMessage_ActionWrapperValidationError{
					field:  fmt.Sprintf("Sections[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// InteractiveMessage_ActionWrapperValidationError is the validation error
// returned by InteractiveMessage_ActionWrapper.Validate if the designated
// constraints aren't met.
type InteractiveMessage_ActionWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InteractiveMessage_ActionWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InteractiveMessage_ActionWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InteractiveMessage_ActionWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InteractiveMessage_ActionWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InteractiveMessage_ActionWrapperValidationError) ErrorName() string {
	return "InteractiveMessage_ActionWrapperValidationError"
}

// Error satisfies the builtin error interface
func (e InteractiveMessage_ActionWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInteractiveMessage_ActionWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InteractiveMessage_ActionWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InteractiveMessage_ActionWrapperValidationError{}

// Validate checks the field values on InteractiveMessage_Section_SectionRow
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *InteractiveMessage_Section_SectionRow) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	return nil
}

// InteractiveMessage_Section_SectionRowValidationError is the validation error
// returned by InteractiveMessage_Section_SectionRow.Validate if the
// designated constraints aren't met.
type InteractiveMessage_Section_SectionRowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InteractiveMessage_Section_SectionRowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InteractiveMessage_Section_SectionRowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InteractiveMessage_Section_SectionRowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InteractiveMessage_Section_SectionRowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InteractiveMessage_Section_SectionRowValidationError) ErrorName() string {
	return "InteractiveMessage_Section_SectionRowValidationError"
}

// Error satisfies the builtin error interface
func (e InteractiveMessage_Section_SectionRowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInteractiveMessage_Section_SectionRow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InteractiveMessage_Section_SectionRowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InteractiveMessage_Section_SectionRowValidationError{}

// Validate checks the field values on
// InteractiveMessage_ButtonsAction_ButtonsActionReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *InteractiveMessage_ButtonsAction_ButtonsActionReply) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 256 {
		return InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 256 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 20 {
		return InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
	}

	if !_InteractiveMessage_ButtonsAction_ButtonsActionReply_Title_Pattern.MatchString(m.GetTitle()) {
		return InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError{
			field:  "Title",
			reason: "value does not match regex pattern \"^[^\\\\x{1F600}-\\\\x{1F6FF}|[\\\\x{2600}-\\\\x{26FF}]*$\"",
		}
	}

	return nil
}

// InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError is the
// validation error returned by
// InteractiveMessage_ButtonsAction_ButtonsActionReply.Validate if the
// designated constraints aren't met.
type InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError) ErrorName() string {
	return "InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInteractiveMessage_ButtonsAction_ButtonsActionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InteractiveMessage_ButtonsAction_ButtonsActionReplyValidationError{}

var _InteractiveMessage_ButtonsAction_ButtonsActionReply_Title_Pattern = regexp.MustCompile("^[^\\x{1F600}-\\x{1F6FF}|[\\x{2600}-\\x{26FF}]*$")
