// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: settings.proto

package model

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegistrationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegistrationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistrationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegistrationRequestMultiError, or nil if none found.
func (m *RegistrationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistrationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cc

	// no validation rules for PhoneNumber

	// no validation rules for Method

	// no validation rules for Cert

	// no validation rules for Pin

	if len(errors) > 0 {
		return RegistrationRequestMultiError(errors)
	}
	return nil
}

// RegistrationRequestMultiError is an error wrapping multiple validation
// errors returned by RegistrationRequest.ValidateAll() if the designated
// constraints aren't met.
type RegistrationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistrationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistrationRequestMultiError) AllErrors() []error { return m }

// RegistrationRequestValidationError is the validation error returned by
// RegistrationRequest.Validate if the designated constraints aren't met.
type RegistrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistrationRequestValidationError) ErrorName() string {
	return "RegistrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegistrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistrationRequestValidationError{}

// Validate checks the field values on VerifyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VerifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VerifyRequestMultiError, or
// nil if none found.
func (m *VerifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return VerifyRequestMultiError(errors)
	}
	return nil
}

// VerifyRequestMultiError is an error wrapping multiple validation errors
// returned by VerifyRequest.ValidateAll() if the designated constraints
// aren't met.
type VerifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyRequestMultiError) AllErrors() []error { return m }

// VerifyRequestValidationError is the validation error returned by
// VerifyRequest.Validate if the designated constraints aren't met.
type VerifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyRequestValidationError) ErrorName() string { return "VerifyRequestValidationError" }

// Error satisfies the builtin error interface
func (e VerifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyRequestValidationError{}

// Validate checks the field values on ApplicationSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationSettingsMultiError, or nil if none found.
func (m *ApplicationSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallbackBackoffDelayMs

	// no validation rules for MaxCallbackBackoffDelayMs

	// no validation rules for CallbackPersist

	if all {
		switch v := interface{}(m.GetMedia()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationSettingsValidationError{
					field:  "Media",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationSettingsValidationError{
					field:  "Media",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMedia()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationSettingsValidationError{
				field:  "Media",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWebhooks()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationSettingsValidationError{
					field:  "Webhooks",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationSettingsValidationError{
					field:  "Webhooks",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWebhooks()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationSettingsValidationError{
				field:  "Webhooks",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PassThrough

	// no validation rules for SentStatus

	// no validation rules for DbGarbagecollectorEnable

	// no validation rules for NotifyUserChangeNumber

	// no validation rules for ShowSecurityNotifications

	if len(errors) > 0 {
		return ApplicationSettingsMultiError(errors)
	}
	return nil
}

// ApplicationSettingsMultiError is an error wrapping multiple validation
// errors returned by ApplicationSettings.ValidateAll() if the designated
// constraints aren't met.
type ApplicationSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationSettingsMultiError) AllErrors() []error { return m }

// ApplicationSettingsValidationError is the validation error returned by
// ApplicationSettings.Validate if the designated constraints aren't met.
type ApplicationSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationSettingsValidationError) ErrorName() string {
	return "ApplicationSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationSettingsValidationError{}

// Validate checks the field values on ProfileAbout with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProfileAbout) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileAbout with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProfileAboutMultiError, or
// nil if none found.
func (m *ProfileAbout) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileAbout) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Text

	if len(errors) > 0 {
		return ProfileAboutMultiError(errors)
	}
	return nil
}

// ProfileAboutMultiError is an error wrapping multiple validation errors
// returned by ProfileAbout.ValidateAll() if the designated constraints aren't met.
type ProfileAboutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileAboutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileAboutMultiError) AllErrors() []error { return m }

// ProfileAboutValidationError is the validation error returned by
// ProfileAbout.Validate if the designated constraints aren't met.
type ProfileAboutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileAboutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileAboutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileAboutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileAboutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileAboutValidationError) ErrorName() string { return "ProfileAboutValidationError" }

// Error satisfies the builtin error interface
func (e ProfileAboutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileAbout.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileAboutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileAboutValidationError{}

// Validate checks the field values on BusinessProfile with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BusinessProfile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessProfile with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessProfileMultiError, or nil if none found.
func (m *BusinessProfile) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessProfile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Description

	// no validation rules for Email

	// no validation rules for Vertical

	if len(errors) > 0 {
		return BusinessProfileMultiError(errors)
	}
	return nil
}

// BusinessProfileMultiError is an error wrapping multiple validation errors
// returned by BusinessProfile.ValidateAll() if the designated constraints
// aren't met.
type BusinessProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessProfileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessProfileMultiError) AllErrors() []error { return m }

// BusinessProfileValidationError is the validation error returned by
// BusinessProfile.Validate if the designated constraints aren't met.
type BusinessProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessProfileValidationError) ErrorName() string { return "BusinessProfileValidationError" }

// Error satisfies the builtin error interface
func (e BusinessProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessProfileValidationError{}

// Validate checks the field values on ApplicationSettings_Media with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationSettings_Media) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationSettings_Media with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationSettings_MediaMultiError, or nil if none found.
func (m *ApplicationSettings_Media) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationSettings_Media) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ApplicationSettings_MediaMultiError(errors)
	}
	return nil
}

// ApplicationSettings_MediaMultiError is an error wrapping multiple validation
// errors returned by ApplicationSettings_Media.ValidateAll() if the
// designated constraints aren't met.
type ApplicationSettings_MediaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationSettings_MediaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationSettings_MediaMultiError) AllErrors() []error { return m }

// ApplicationSettings_MediaValidationError is the validation error returned by
// ApplicationSettings_Media.Validate if the designated constraints aren't met.
type ApplicationSettings_MediaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationSettings_MediaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationSettings_MediaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationSettings_MediaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationSettings_MediaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationSettings_MediaValidationError) ErrorName() string {
	return "ApplicationSettings_MediaValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationSettings_MediaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationSettings_Media.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationSettings_MediaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationSettings_MediaValidationError{}

// Validate checks the field values on ApplicationSettings_Webhooks with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationSettings_Webhooks) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationSettings_Webhooks with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationSettings_WebhooksMultiError, or nil if none found.
func (m *ApplicationSettings_Webhooks) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationSettings_Webhooks) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for MaxConcurrentRequests

	if len(errors) > 0 {
		return ApplicationSettings_WebhooksMultiError(errors)
	}
	return nil
}

// ApplicationSettings_WebhooksMultiError is an error wrapping multiple
// validation errors returned by ApplicationSettings_Webhooks.ValidateAll() if
// the designated constraints aren't met.
type ApplicationSettings_WebhooksMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationSettings_WebhooksMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationSettings_WebhooksMultiError) AllErrors() []error { return m }

// ApplicationSettings_WebhooksValidationError is the validation error returned
// by ApplicationSettings_Webhooks.Validate if the designated constraints
// aren't met.
type ApplicationSettings_WebhooksValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationSettings_WebhooksValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationSettings_WebhooksValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationSettings_WebhooksValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationSettings_WebhooksValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationSettings_WebhooksValidationError) ErrorName() string {
	return "ApplicationSettings_WebhooksValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationSettings_WebhooksValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationSettings_Webhooks.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationSettings_WebhooksValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationSettings_WebhooksValidationError{}
