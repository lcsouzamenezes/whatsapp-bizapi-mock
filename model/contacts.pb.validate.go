// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: contacts.proto

package model

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Contact with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Contact) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WaId

	// no validation rules for Input

	// no validation rules for Status

	if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContactValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ContactValidationError is the validation error returned by Contact.Validate
// if the designated constraints aren't met.
type ContactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactValidationError) ErrorName() string { return "ContactValidationError" }

// Error satisfies the builtin error interface
func (e ContactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactValidationError{}

// Validate checks the field values on ContactRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ContactRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Blocking

	// no validation rules for ForceCheck

	return nil
}

// ContactRequestValidationError is the validation error returned by
// ContactRequest.Validate if the designated constraints aren't met.
type ContactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactRequestValidationError) ErrorName() string { return "ContactRequestValidationError" }

// Error satisfies the builtin error interface
func (e ContactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactRequestValidationError{}

// Validate checks the field values on ContactResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ContactResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetContacts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContactResponseValidationError{
					field:  fmt.Sprintf("Contacts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ContactResponseValidationError is the validation error returned by
// ContactResponse.Validate if the designated constraints aren't met.
type ContactResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactResponseValidationError) ErrorName() string { return "ContactResponseValidationError" }

// Error satisfies the builtin error interface
func (e ContactResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactResponseValidationError{}

// Validate checks the field values on Contact_Profile with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Contact_Profile) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// Contact_ProfileValidationError is the validation error returned by
// Contact_Profile.Validate if the designated constraints aren't met.
type Contact_ProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Contact_ProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Contact_ProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Contact_ProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Contact_ProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Contact_ProfileValidationError) ErrorName() string { return "Contact_ProfileValidationError" }

// Error satisfies the builtin error interface
func (e Contact_ProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContact_Profile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Contact_ProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Contact_ProfileValidationError{}
